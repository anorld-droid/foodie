// Mocks generated by Mockito 5.4.2 from annotations
// in network/test/src/firebase/cloud_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:network/src/firebase/cloud.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDocumentSnapshot_0<T extends Object?> extends _i1.SmartFake
    implements _i2.DocumentSnapshot<T> {
  _FakeDocumentSnapshot_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuerySnapshot_1<T extends Object?> extends _i1.SmartFake
    implements _i2.QuerySnapshot<T> {
  _FakeQuerySnapshot_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CloudMethods].
///
/// See the documentation for Mockito's code generation for more information.
class MockCloudMethods extends _i1.Mock implements _i3.CloudMethods {
  MockCloudMethods() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> setDoc<R>({
    required String? collection,
    required String? doc,
    required R? file,
    required R Function(
      _i2.DocumentSnapshot<Map<String, dynamic>>,
      _i2.SnapshotOptions?,
    )? fromFirestore,
    required Map<String, Object?> Function(
      R,
      _i2.SetOptions?,
    )? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDoc,
          [],
          {
            #collection: collection,
            #doc: doc,
            #file: file,
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addDoc<R>({
    required String? collectionName,
    required String? docPath,
    required String? collectionPath,
    required R? file,
    required R Function(
      _i2.DocumentSnapshot<Map<String, dynamic>>,
      _i2.SnapshotOptions?,
    )? fromFirestore,
    required Map<String, Object?> Function(
      R,
      _i2.SetOptions?,
    )? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDoc,
          [],
          {
            #collectionName: collectionName,
            #docPath: docPath,
            #collectionPath: collectionPath,
            #file: file,
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.DocumentSnapshot<R>> getDoc<R>({
    required String? collection,
    required String? doc,
    required R Function(
      _i2.DocumentSnapshot<Map<String, dynamic>>,
      _i2.SnapshotOptions?,
    )? fromFirestore,
    required Map<String, Object?> Function(
      R,
      _i2.SetOptions?,
    )? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDoc,
          [],
          {
            #collection: collection,
            #doc: doc,
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _i4.Future<_i2.DocumentSnapshot<R>>.value(
            _FakeDocumentSnapshot_0<R>(
          this,
          Invocation.method(
            #getDoc,
            [],
            {
              #collection: collection,
              #doc: doc,
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        )),
      ) as _i4.Future<_i2.DocumentSnapshot<R>>);

  @override
  _i4.Future<_i4.Stream<_i2.DocumentSnapshot<R>>> getDocStream<R>({
    required String? collection,
    required String? doc,
    required R Function(
      _i2.DocumentSnapshot<Map<String, dynamic>>,
      _i2.SnapshotOptions?,
    )? fromFirestore,
    required Map<String, Object?> Function(
      R,
      _i2.SetOptions?,
    )? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDocStream,
          [],
          {
            #collection: collection,
            #doc: doc,
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _i4.Future<_i4.Stream<_i2.DocumentSnapshot<R>>>.value(
            _i4.Stream<_i2.DocumentSnapshot<R>>.empty()),
      ) as _i4.Future<_i4.Stream<_i2.DocumentSnapshot<R>>>);

  @override
  _i4.Future<_i4.Stream<_i2.DocumentSnapshot<R>>> getDocFromMultiCollection<R>({
    required String? parentCol,
    required String? parentDoc,
    required String? childCol,
    required String? childDoc,
    required R Function(
      _i2.DocumentSnapshot<Map<String, dynamic>>,
      _i2.SnapshotOptions?,
    )? fromFirestore,
    required Map<String, Object?> Function(
      R,
      _i2.SetOptions?,
    )? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDocFromMultiCollection,
          [],
          {
            #parentCol: parentCol,
            #parentDoc: parentDoc,
            #childCol: childCol,
            #childDoc: childDoc,
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _i4.Future<_i4.Stream<_i2.DocumentSnapshot<R>>>.value(
            _i4.Stream<_i2.DocumentSnapshot<R>>.empty()),
      ) as _i4.Future<_i4.Stream<_i2.DocumentSnapshot<R>>>);

  @override
  _i4.Future<_i4.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>>
      getCollectionStream<R>({required String? collection}) =>
          (super.noSuchMethod(
            Invocation.method(
              #getCollectionStream,
              [],
              {#collection: collection},
            ),
            returnValue: _i4.Future<
                    _i4.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>>.value(
                _i4.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>.empty()),
          ) as _i4.Future<_i4.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>>);

  @override
  _i4.Stream<_i2.QuerySnapshot<R>> getDocs<R>({
    required String? collectionName,
    required String? docPath,
    required String? collectionPath,
    required R Function(
      _i2.DocumentSnapshot<Map<String, dynamic>>,
      _i2.SnapshotOptions?,
    )? fromFirestore,
    required Map<String, Object?> Function(
      R,
      _i2.SetOptions?,
    )? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDocs,
          [],
          {
            #collectionName: collectionName,
            #docPath: docPath,
            #collectionPath: collectionPath,
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _i4.Stream<_i2.QuerySnapshot<R>>.empty(),
      ) as _i4.Stream<_i2.QuerySnapshot<R>>);

  @override
  _i4.Future<void> updateField<R>({
    required String? collection,
    required String? doc,
    required Map<String, Object?>? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateField,
          [],
          {
            #collection: collection,
            #doc: doc,
            #data: data,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateFieldFromMultiCollection<R>({
    required String? parentCol,
    required String? parentDoc,
    required String? childCol,
    required String? childDoc,
    required Map<String, Object?>? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFieldFromMultiCollection,
          [],
          {
            #parentCol: parentCol,
            #parentDoc: parentDoc,
            #childCol: childCol,
            #childDoc: childDoc,
            #data: data,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDocFromMulitiCollection<R>({
    required String? collectionName,
    required String? docPath,
    required String? collectionPath,
    required String? docId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDocFromMulitiCollection,
          [],
          {
            #collectionName: collectionName,
            #docPath: docPath,
            #collectionPath: collectionPath,
            #docId: docId,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.QuerySnapshot<R>> filterDocs<R>({
    required String? collection,
    required String? filterValue,
    required R Function(
      _i2.DocumentSnapshot<Map<String, dynamic>>,
      _i2.SnapshotOptions?,
    )? fromFirestore,
    required Map<String, Object?> Function(
      R,
      _i2.SetOptions?,
    )? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterDocs,
          [],
          {
            #collection: collection,
            #filterValue: filterValue,
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue:
            _i4.Future<_i2.QuerySnapshot<R>>.value(_FakeQuerySnapshot_1<R>(
          this,
          Invocation.method(
            #filterDocs,
            [],
            {
              #collection: collection,
              #filterValue: filterValue,
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        )),
      ) as _i4.Future<_i2.QuerySnapshot<R>>);
}
